# Docker Compose file for running paperless from the Docker Hub.
# This file contains everything paperless needs to run.
# Paperless supports amd64, arm and arm64 hardware.
#
# All compose files of paperless configure paperless in the following way:
#
# - Paperless is (re)started on system boot, if it was running before shutdown.
# - Docker volumes for storing data are managed by Docker.
# - Folders for importing and exporting files are created in the same directory
#   as this file and mounted to the correct folders inside the container.
# - Paperless listens on port 8010.
#
# In addition to that, this Docker Compose file adds the following optional
# configurations:
#
# - Instead of SQLite (default), PostgreSQL is used as the database server.
#
# To install and update paperless with this file, do the following:
#
# - Open portainer Stacks list and click 'Add stack'
# - Paste the contents of this file and assign a name, e.g. 'paperless'
# - Click 'Deploy the stack' and wait for it to be deployed
# - Open the list of containers, select paperless_webserver_1
# - Click 'Console' and then 'Connect' to open the command line inside the container
# - Run 'python3 manage.py createsuperuser' to create a user
# - Exit the console
#
# For more extensive installation and update instructions, refer to the
# documentation.

services:
  broker:
    image: docker.io/library/redis:7
    restart: unless-stopped
    volumes:
      - redisdata:/data
    networks:
      - paperless

  db:
    image: docker.io/library/postgres:16
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: ${PG_USER:-paperless}
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
    networks:
      - paperless
      - db_backend

  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - db
      - broker
    networks: 
      - paperless
      - proxy
      - email
    ports:
      - "8010:8000"
    volumes:
      - data:/usr/src/paperless/data
      - media:/usr/src/paperless/media
      - ./export:/usr/src/paperless/export
      - ./consume:/usr/src/paperless/consume
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.paperless.entrypoints=web"
      - "traefik.http.routers.paperless.rule=Host(`paperless.watermelononatoothpick.com`)"
      - "traefik.http.middlewares.paperless-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.paperless.middlewares=paperless-https-redirect"
      - "traefik.http.routers.paperless-secure.entrypoints=websecure"
      - "traefik.http.routers.paperless-secure.rule=Host(`paperless.watermelononatoothpick.com`)"
      - "traefik.http.routers.paperless-secure.tls=true"
      - "traefik.http.routers.paperless-secure.service=paperless"
      - "traefik.http.services.paperless.loadbalancer.server.port=8000"
      - "traefik.docker.network=proxy"
      - "kop.bind.ip=192.168.128.3"
    environment:
      PAPERLESS_URL: https://paperless.watermelononatoothpick.com
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBHOST: db
      PAPERLESS_DBUSER: ${PG_USER:-paperless}
      PAPERLESS_DBPASS: ${PG_PASS:?database password required}
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://tika:9998
      PAPERLESS_OCR_USER_ARGS: '{"invalidate_digital_signatures": true}'
# The UID and GID of the user used to run paperless in the container. Set this
# to your UID and GID on the host so that you have write access to the
# consumption directory.
      USERMAP_UID: 1000
      USERMAP_GID: 1000
# Additional languages to install for text recognition, separated by a
# whitespace. Note that this is
# different from PAPERLESS_OCR_LANGUAGE (default=eng), which defines the
# language used for OCR.
# The container installs English, German, Italian, Spanish and French by
# default.
# See https://packages.debian.org/search?keywords=tesseract-ocr-&searchon=names&suite=buster
# for available languages.
      #PAPERLESS_OCR_LANGUAGES: tur ces
# Adjust this key if you plan to make paperless available publicly. It should
# be a very long sequence of random characters. You don't need to remember it.
      #PAPERLESS_SECRET_KEY: change-me
# Use this variable to set a timezone for the Paperless Docker containers. If not specified, defaults to UTC.
      #PAPERLESS_TIME_ZONE: America/Los_Angeles
# The default language to use for OCR. Set this to the language most of your
# documents are written in.
      #PAPERLESS_OCR_LANGUAGE: eng
      PAPERLESS_APPS: "allauth.socialaccount.providers.openid_connect"
      PAPERLESS_SOCIALACCOUNT_PROVIDERS: '{"openid_connect": {"APPS": [{"provider_id": "authentik","name": "Authentik SSO","client_id": "qFnkIsVUTarS4ZzRr2cKeHCOCY1JHGWLePra2cHo","secret": "DJai9xFDcFxrQ03PR956jHEGC7hA62HE5nQaGK9Umom2apFXaThvhE7MFFFyZ4EOpU2DToVRGNdgcAszfke685fTxCaRjGggWCgJp2zWMtKdwxyoSi1iTeNdDedFU85M","settings": { "server_url": "https://auth.watermelononatoothpick.com/application/o/paperless-ngx/.well-known/openid-configuration"}}]}}'
  gotenberg:
    image: docker.io/gotenberg/gotenberg:8.7
    restart: unless-stopped

    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"
    networks:
      - paperless
  tika:
    image: docker.io/apache/tika:latest
    restart: unless-stopped
    networks:
      - paperless

volumes:
  # data:
  #   driver_opts:
  #     type: "nfs"
  #     o: "addr=192.168.25.4,nolock,soft,rw"
  #     device: ":/mnt/NStorage/docker-persist/paperless/data"
  # media:
  #   driver_opts:
  #     type: "nfs"
  #     o: "addr=192.168.25.4,nolock,soft,rw"
  #     device: ":/mnt/NStorage/docker-persist/paperless/media"
  data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: /mnt/NStorage/docker-persist/paperless/data
  media:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: /mnt/NStorage/docker-persist/paperless/media
      
  pgdata:
  redisdata:
networks:
  proxy:
    external: true
  db_backend:
    external: true
  paperless:
  email:
    external: true